# vim:set et sw=4 ts=4 tw=79:
Execute (Setup template path):
    Save g:jsdoc_templates_path
    let g:jsdoc_templates_path = ''

Given javascript (named function with no arg):
  function foo() { }

Execute:
  JsDoc
  :sleep 1

Expect javascript:
  /**
   * foo.
   */
  function foo() { }

Given javascript (named function with arg):
  function foo(arg) { }

Execute:
  :JsDoc
  :sleep 1

Expect javascript:
  /**
   * foo.
   *
   * @param {} arg
   */
  function foo(arg) { }

Given javascript (named function with args):
  function foo(arg1, arg2) { }

Execute:
  :JsDoc
  :sleep 1

Expect javascript:
  /**
   * foo.
   *
   * @param {} arg1
   * @param {} arg2
   */
  function foo(arg1, arg2) { }

Given javascript (named generator function with args):
  function* foo(arg1, arg2) { }

Execute:
  :JsDoc
  :sleep 1

Expect javascript:
  /**
   * foo.
   *
   * @param {} arg1
   * @param {} arg2
   */
  function* foo(arg1, arg2) { }

Given javascript (anonymous function expression):
  const foo = function() { }

Execute:
  :JsDoc
  :sleep 1

Expect javascript:
  /**
   * foo.
   */
  const foo = function() { }

Given javascript (anonymous function expression):
  const foo = function(arg1, arg2) { }

Execute:
  :JsDoc
  :sleep 1

Expect javascript:
  /**
   * foo.
   *
   * @param {} arg1
   * @param {} arg2
   */
  const foo = function(arg1, arg2) { }

Given javascript (anonymous function generator expression):
  const foo = function* (arg1, arg2) { }

Execute:
  :JsDoc
  :sleep 1

Expect javascript:
  /**
   * foo.
   *
   * @param {} arg1
   * @param {} arg2
   */
  const foo = function* (arg1, arg2) { }

Given javascript (named function generator expression):
  const foo = function foo(arg1, arg2) { }

Execute:
  :JsDoc
  :sleep 1

Expect javascript:
  /**
   * foo.
   *
   * @param {} arg1
   * @param {} arg2
   */
  const foo = function foo(arg1, arg2) { }

Given javascript (arrow function):
  const foo = arg1 => { }

Execute:
  :JsDoc
  :sleep 1

Expect javascript:
  /**
   * foo.
   *
   * @param {} arg1
   */
  const foo = arg1 => { }

Given javascript (arrow function with args):
  const foo = (arg1, arg2) => { }

Execute:
  :JsDoc
  :sleep 1

Expect javascript:
  /**
   * foo.
   *
   * @param {} arg1
   * @param {} arg2
   */
  const foo = (arg1, arg2) => { }

Given javascript (keyword arguments):
  function foo(arg, arg1 = 'foo', arg2 = 100) {}

Execute:
  :JsDoc
  :sleep 1

Expect javascript:
  /**
   * foo.
   *
   * @param {} arg
   * @param {} arg1
   * @param {} arg2
   */
  function foo(arg, arg1 = 'foo', arg2 = 100) {}


Given javascript (async):
  const foo = async foo(arg, arg1, arg2) => {}

Execute:
  :JsDoc
  :sleep 1

Expect javascript:
  /**
   * foo.
   *
   * @param {} arg
   * @param {} arg1
   * @param {} arg2
   */
  const foo = async foo(arg, arg1, arg2) => {}

Given javascript (export default function):
  export default function (arg1, arg2) {}

Execute:
  :JsDoc
  :sleep 1

Expect javascript:
  /**
   * function.
   *
   * @param {} arg1
   * @param {} arg2
   */
  export default function (arg1, arg2) {}


Given javascript (namespace):
  namespace.a = function (e) { }

Execute:
  :JsDoc
  :sleep 1

Expect javascript:
  /**
   * namespace.a.
   *
   * @param {} e
   */
  namespace.a = function (e) { }

Given javascript (class):
  class Foo {}

Execute:
  :JsDoc
  :sleep 1

Expect javascript:
  /**
   * Foo.
   */
  class Foo {}

Given javascript (extend class):
  class Foo extends Bar {}

Execute:
  :JsDoc
  :sleep 1

Expect javascript:
  /**
   * Foo.
   *
   * @extends {Bar}
   */
  class Foo extends Bar {}

Given javascript (method):
  class Foo {
    bar () {
      console.log('foo')
    }
  }

Execute:
  :call search('bar')
  :JsDoc
  :sleep 1

Expect javascript:
  class Foo {
    /**
     * bar.
     */
    bar () {
      console.log('foo')
    }
  }

Given javascript (method with args):
  class Foo {
    bar (arg1, arg2) {
      console.log('foo')
    }
  }

Execute:
  :call search('bar')
  :JsDoc
  :sleep 1

Expect javascript:
  class Foo {
    /**
     * bar.
     *
     * @param {} arg1
     * @param {} arg2
     */
    bar (arg1, arg2) {
      console.log('foo')
    }
  }

Given javascript (static method):
  class Foo {
    static bar (arg1, arg2) {
      console.log('foo')
    }
  }

Execute:
  :call search('bar')
  :JsDoc
  :sleep 1

Expect javascript:
  class Foo {
    /**
     * bar.
     *
     * @param {} arg1
     * @param {} arg2
     */
    static bar (arg1, arg2) {
      console.log('foo')
    }
  }
